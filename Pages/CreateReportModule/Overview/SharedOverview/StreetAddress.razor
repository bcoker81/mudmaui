@using AspNetCoreBlazorStateManagement.Pages.CreateReportModule.Overview.SharedOverview
@using AspNetCoreBlazorStateManagement.Data

@inject StreetAddressViewModel StreetAddressVm
@implements IDisposable

<MudGrid>
    <MudItem xs="12" sm="2" md="2">
        <MudTextField @bind-Value="StreetAddressVm.RNumber" Label="RNumber 2347839" Variant="Variant.Text"
            Disabled="true"></MudTextField>
    </MudItem>
    <MudItem xs="12" sm="2" md="2">
        <MudSwitch @bind-Value="StreetAddressVm.LPRChecked" Color="Color.Primary" class="ma-4" T="bool" Label="LPR" />
    </MudItem>
    <MudItem xs="12" sm="3" md="3">
        <MudTextField @bind-Value="StreetAddressVm.IncidentNumber" Label="Incident Number" Variant="Variant.Text">
        </MudTextField>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" sm="2" md="2">
        <MudAutocomplete T="string" Label="Occurred" @bind-Value="StreetAddressVm.Occurred"
            SearchFunc="@DropdownOptions.SearchOccurredOn" ResetValueOnEmptyText="@resetValueOnEmptyText"
            CoerceText="@coerceText" CoerceValue="@coerceValue" />
    </MudItem>
    <MudItem xs="12" sm="2" md="2">
        <MudTextField @bind-Value="StreetAddressVm.StartDateTime" InputType="InputType.Date" Label="Start Date / Time"
            Variant="Variant.Text">
        </MudTextField>
    </MudItem>
    <MudItem xs="12" sm="3" md="3">
        <MudTextField @bind-Value="StreetAddressVm.IncidentNumber" InputType="InputType.Time" Label="Incident Number"
            Variant="Variant.Text">
        </MudTextField>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" sm="2" md="2">
        <MudSwitch Color="Color.Primary" @bind-Value="StreetAddressVm.Occurred" class="ma-4" T="bool"
            Label="Occurred" />
    </MudItem>
    <MudItem xs="12" sm="2" md="2">
        <MudAutocomplete T="string" Label="Troop" @bind-Value="StreetAddressVm.TroopOfOccurrence"
            SearchFunc="@DropdownOptions.SearchTroops" ResetValueOnEmptyText="@resetValueOnEmptyText"
            CoerceText="@coerceText" CoerceValue="@coerceValue" />
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" sm="2" md="2">
        <MudNumericField @bind-Value="StreetAddressVm.Latitude" Label="Latitude" Variant="Variant.Text" Min="0"
            Max="10" />
    </MudItem>
    <MudItem xs="12" sm="2" md="2">
        <MudNumericField @bind-Value="StreetAddressVm.Longitude" Label="Longitude" Variant="Variant.Text" Min="0"
            Max="10" />
    </MudItem>
    <MudItem xs="12" sm="2" md="2">
        <MudButton Disabled="@_processing" OnClick="ProcessSomething" class="ma-4" Variant="Variant.Filled"
            Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Retrieving</MudText>
            }
            else
            {
                <MudText>Get Current</MudText>
            }
        </MudButton>
    </MudItem>
</MudGrid>
<MudGrid>
    <MudItem xs="12" sm="12" md="12">
        <MudAutocomplete T="string" Label="Address Type" @bind-Value="StreetAddressVm.AddressType"
            SearchFunc="@DropdownOptions.SearchAddressTypes" ResetValueOnEmptyText="@resetValueOnEmptyText"
            CoerceText="@coerceText" CoerceValue="@coerceValue" />
    </MudItem>
</MudGrid>
@if (StreetAddressVm.AddressType == null)
{

}
else if (StreetAddressVm.AddressType.Contains("1"))
{
    <RoadwayAddress />
}
else if (StreetAddressVm.AddressType.Contains("2"))
{
    <StreetAddress />
}

@code {
    [Parameter] public string? TextValue { get; set; }
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool _processing = false;
    private bool coerceValue;
    private string? value1, value2;

    protected override void OnInitialized()
    {
        StreetAddressVm.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }

    public void Dispose()
    {
        StreetAddressVm.OnChange -= StateHasChanged;
    }
}

